Cписок всех команд запускаемых в Django shell.


# Запустим окно командной строки.

     python manage.py shell



# Импортируем модель news.

     >>> from news.models import *



# Создаём двух пользователей (с помощью метода User.objects.create_user('username')).

     >>> u1 = User.objects.create_user(username='Rick')
     >>> u1    
     <User: Rick>

     >>> u2 = User.objects.create_user(username='Morty')
     >>> u2    
     <User: Morty>



# Создаём два объекта модели Author, связанные с пользователями.

     >>> Author.objects.create(authorUser=u1)
     <Author: Author object (1)>

     >>> Author.objects.create(authorUser=u2)
     <Author: Author object (2)>



# Добавляем 4 категории в модель Category.

     >>> Category.objects.create(name='IT')            
     <Category: Category object (1)>

     >>> Category.objects.create(name='Economics')
     <Category: Category object (2)>

     >>> Category.objects.create(name='Politics')
     <Category: Category object (3)>

     >>> Category.objects.create(name='Sports')
     <Category: Category object (4)>



# Добавляем 2 статьи и 1 новость. 


# Получаем автора первого по id.

     >>> author1 = Author.objects.get(id=1)
     >>> author1    # проверка    
     <Author: Author object (1)>


# Создаем пост.

     >>> Post.objects.create(author=author1, categoryType='AR', title='python programming', text='a lot of useful information')
     <Post: Post object (1)>
     >>> Post.objects.get(id=1).title    
     'python programming'

     >>> Post.objects.get(id=1).categoryType     
     'AR'
 

# Получаем автора второго по id.

     >>> author2 = Author.objects.get(id=2) 
     >>> author2      
     <Author: Author object (2)>


# Создаем пост.

     >>> Post.objects.create(author=author2, categoryType='AR', title='Django', text='a lot of useful information')
     <Post: Post object (2)>

     >>> Post.objects.get(id=2).title
     'Django'

     >>> Post.objects.get(id=2).categoryType
     'AR'

     >>> Post.objects.create(author=author2, categoryType='NW', title='Python 3.12', text='something new') 
     <Post: Post object (6)>

     >>> Post.objects.get(id=6).categoryType 
     'NW'



# Присваиваем им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

     >>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
     >>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
     >>> PostCategory.objects.get(id=1).postThrough
     <Post: Post object (1)>
     >>> PostCategory.objects.get(id=1).categoryThrough
     <Category: Category object (1)>

     >>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))
     >>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
     >>> PostCategory.objects.get(id=2).categoryThrough
     <Category: Category object (2)>

     >>> Post.objects.get(id=6).postCategory.add(Category.objects.get(id=1)) 
     >>> Post.objects.get(id=6).postCategory.add(Category.objects.get(id=2)) 
     >>> PostCategory.objects.get(id=6).categoryThrough 
     <Category: Category object (2)>


# Создаём 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

     >>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='Grandson check out the article')
     <Comment: Comment object (1)>
     >>> Comment.objects.get(id=1).text
     'Grandson check out the article'

     >>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='Thank you grandfather, I want to become a programmer :)')
     <Comment: Comment object (2)>
     >>> Comment.objects.get(id=2).text 
     'Thank you grandfather, I want to become a programmer :)'

     >>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='Yes, this is what you need!')                   
     <Comment: Comment object (3)>
     >>> Comment.objects.get(id=3).text 
     'Yes, this is what you need!'

     >>> Comment.objects.create(commentPost=Post.objects.get(id=6), commentUser=Author.objects.get(id=2).authorUser, text='SkillFactory will help you figure it out! Grandpa advised me!')
     <Comment: Comment object (4)>
     >>> Comment.objects.get(id=4).text 
     'SkillFactory will help you figure it out! Grandpa advised me!'

     >>> Comment.objects.create(commentPost=Post.objects.get(id=6), commentUser=Author.objects.get(id=1).authorUser, text='Listen to your grandpa and sign up for the course!')            
     <Comment: Comment object (5)>
     >>> Comment.objects.get(id=5).text 
     'Listen to your grandpa and sign up for the course!'


# Применяем функции like() и dislike() к статьям/новостям и созданным к ним комментариям, выводим рейтинги этих объектов.

     >>> Post.objects.get(id=1).like()
     >>> Post.objects.get(id=1).like()
     >>> Post.objects.get(id=1).rating
     2
     >>> Comment.objects.get(id=1).like()
     >>> Comment.objects.get(id=1).like()
     >>> Comment.objects.get(id=1).rating
     2
     >>> Comment.objects.get(id=2).like()
     >>> Comment.objects.get(id=2).like()
     >>> Comment.objects.get(id=2).dislike()
     >>> Comment.objects.get(id=2).dislike()
     >>> Comment.objects.get(id=2).rating 
     0


     >>> Post.objects.get(id=2).like()
     >>> Post.objects.get(id=2).like()
     >>> Post.objects.get(id=2).dislike()
     >>> Post.objects.get(id=2).rating
     1
     >>> Comment.objects.get(id=3).like() 
     >>> Comment.objects.get(id=3).dislike()
     >>> Comment.objects.get(id=3).rating
     0


     >>> Post.objects.get(id=6).like()
     >>> Post.objects.get(id=6).dislike()
     >>> Post.objects.get(id=6).rating
     0
     >>> Comment.objects.get(id=4).like()
     >>> Comment.objects.get(id=4).like()
     >>> Comment.objects.get(id=4).like()
     >>> Comment.objects.get(id=4).rating 
     3
     >>> Comment.objects.get(id=5).like()
     >>> Comment.objects.get(id=5).like()
     >>> Comment.objects.get(id=5).like()
     >>> Comment.objects.get(id=5).like()
     >>> Comment.objects.get(id=5).rating
     4



# Обновляем рейтинги пользователей.


# Получаем автора по id.

     >>> Author.objects.get(id=1)     
     <Author: Author object (1)>


# Присваиваем в переменную а и b и обновляем рейтинги пользователей.

     >>> a = Author.objects.get(id=1)
     >>> a.update_rating()
     >>> a.ratingAuthor
     12

     >>> b = Author.objects.get(id=2)
     >>> b.update_rating()
     >>> b.ratingAuthor
     6



# Выведим username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).


# Выводим рейтинг лучшего пользователя применяя сортировку.

     >>> best_author = Author.objects.order_by('-ratingAuthor')[:1]
     >>> best_author
     <QuerySet [<Author: Author object (1)>]>


# Выводим рейтинги всех пользователей применяя сортировку.

     >>> all_rating_author = Author.objects.order_by('-ratingAuthor')
     >>> all_rating_author
     <QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>


# Выводим рейтинги и всех пользователей применяя цикл for.

     >>> for i in all_rating_author:
     ...     i.ratingAuthor 
     ...     i.authorUser.username
     ... 
     12
     'Rick'
     6
     'Morty'



# Выведим дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье. 


# Применяем метод preview() к постам.

     >>> Post.objects.get(id=1).preview()                       
     'a lot of useful information...'
     >>> Post.objects.get(id=2).preview() 
     'a lot of useful information...'
     >>> Post.objects.get(id=6).preview() 
     'something new...'


# Определяем лучшей пост по лайкам и дислайкам.

     >>> best_post = Post.objects.order_by('-rating')[:1]
     >>> best_post
     <QuerySet [<Post: Post object (1)>]>


# Выведим дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи.

     >>> for i in best_post:
     ...     i.dateCreation
     ...     i.author.authorUser
     ...     i.rating
     ...     i.title
     ...     i.preview()
     ... 
     datetime.datetime(2022, 11, 17, 16, 41, 3, 928129, tzinfo=datetime.timezone.utc)
     <User: Rick>
     2
     'python programming'
     'a lot of useful information...'



# Выводим все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

     >>> best_post_com = Comment.objects.filter(commentPost=best_post)
     >>> best_post_com
     <QuerySet [<Comment: Comment object (1)>, <Comment: Comment object (2)>]>


# Выводим через цикл for

     >>> for k in best_post_com:
     ...     k.dateCreation
     ...     k.commentUser
     ...     k.rating
     ...     k.text
     ... 
     datetime.datetime(2022, 11, 19, 14, 53, 14, 695981, tzinfo=datetime.timezone.utc)
     <User: Rick>
     2
     'Grandson check out the article'
     datetime.datetime(2022, 11, 19, 15, 0, 11, 960516, tzinfo=datetime.timezone.utc)
     <User: Morty>
     0
     'Thank you grandfather, I want to become a programmer :)'


# через values

     >>> best_post_com.values("dateCreation", "commentUser", "rating", "text") 
     <QuerySet [{'dateCreation': datetime.datetime(2022, 11, 19, 14, 53, 14, 695981, tzinfo=datetime.timezone.utc), 'commentUser
     ': 1, 'rating': 2, 'text': 'Grandson check out the article'}, {'dateCreation': datetime.datetime(2022, 11, 19, 15, 0, 11, 9
     60516, tzinfo=datetime.timezone.utc), 'commentUser': 2, 'rating': 0, 'text': 'Thank you grandfather, I want to become a programmer :)'}]>
